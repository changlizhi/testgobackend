package ml7yewus

import (
  "xm1shengcheng/ml2moxings"
)

// 设计一个交易分配方案，交易对应着表名，比如添加用户的把关联的表全都放到参数中，这样只要一个方法就可以操作所有的业务表了，也不需要分开不同的业务方案
// 也就是定一个根据描述的方式获取数据进行自动代码的生成和展示数据返回。也就是说每一个交易中有自己的逻辑是定死的，现在设计方案就是根据这个设定开展的，所有的业务都在这个代码的约定下进行的。
// 比如添加用户，就是
// 1. 查出所有的YongHu表字段，然后根据表字段名拿到的正则表达式验证所有的参数栏位是否符合正则表达式要求的，符合之后
// 2. 查出这个主键是否有数据对应，有就查出来，这里先看没有的情况，就是把所有字段名放到map的key中，然后根据传入的值拼装不同的sql，录入一条表数据表
// 3. 根据查到的表名录入各个字段表的数据。这样每个字段都分别进入不同的表了。对于那些非必要的数据就录入一条默认值，等待后期更新即可。实际上这个字段的主键都是不必要的，因为在不同的表中都可以用表数据的主键来完成唯一性设定

func TianJiaYongHu(canShu ml2moxings.CanShu) ml2moxings.FanHui{
  ret := ml2moxings.FanHui{
    ZhuangTai:"00",
  }
  return ret
}
